
- name: support packages
  apt: pkg={{ item }} state=present update_cache=true install_recommends=no
  with_items:
    - git
    - redis-server
    - redis-tools
    - ca-certificates
    - gunicorn
  when: app == 1
  tags:
     - setup

- name: check deployment user
  user: name={{ rtd_user }} state=present home={{ rtd_home }} uid=1005 group={{ rtd_user }} shell=/bin/bash
  when: app == 1
  tags:
     - setup
     - deploy

- name: ensure directory structure
  file: path="{{ item }}" state=directory mode=0755 owner={{ nginx_user }}
  with_items:
    - "{{ nginx_logs }}"
  when: app == 1
  tags:
     - setup
     - deploy

- name: ensure directory structure
  file: path="{{ rtd_home }}/{{ item }}" state=directory mode=0755 owner={{ rtd_user }}
  with_items:
    - log
  when: app == 1
  tags:
     - setup
     - deploy

- name: check postgres user
  become_user: "postgres"
  postgresql_user: name={{ rtd_db_user }}
  when: app == 1
  tags:
     - setup
     - deploy

- name: check docs.italia.it db
  become_user: "postgres"
  postgresql_db: name={{ rtd_db_name }} owner={{ rtd_db_user }}
  when: app == 1
  tags:
     - setup
     - deploy

- name: install italia_rtd
  become_user: "{{ rtd_user }}"
  git: repo={{ rtd_italia_repo }} dest={{ rtd_italia_root }} version={{ rtd_italia_branch }}
  when: app == 1
  tags:
     - deploy

- name: install rtd
  become_user: "{{ rtd_user }}"
  git: repo={{ rtd_repo }} dest={{ rtd_root }} version={{ rtd_branch }}
  when: app == 1
  notify: "restart rtd"
  tags:
     - deploy

- name: update virtualenv (python 3)
  become_user: "{{ rtd_user }}"
  pip:
    requirements: "{{ rtd_root }}/requirements/deploy.txt"
    virtualenv: "{{ rtd_virtualenv }}"
    virtualenv_command: "/usr/bin/python{{ python_version }} -m venv"
  when: app == 1 and python_version != 2.7
  tags:
     - deploy

- name: update virtualenv (python 2.7)
  become_user: "{{ rtd_user }}"
  pip:
    requirements: "{{ rtd_root }}/requirements/deploy.txt"
    virtualenv: "{{ rtd_virtualenv }}"
    virtualenv_command: "/usr/bin/virtualenv -p /usr/bin/python{{ python_version }}"
  when: app == 1 and python_version == 2.7
  tags:
     - deploy

- name: install additional requirements in virtualenv
  become_user: "{{ rtd_user }}"
  pip:
    name: "{{ item }}"
    virtualenv: "{{ rtd_virtualenv }}"
  with_items:
    - django-restricted-sessions
    - "Flask==0.10.0"
    - "setuptools>=33"
  when: app == 1
  tags:
     - deploy

- name: install italia_rtd in virtualenv
  become_user: "{{ rtd_user }}"
  pip:
    name: "file://{{ rtd_italia_root }}"
    virtualenv: "{{ rtd_virtualenv }}"
  when: app == 1
  tags:
     - deploy

- name: django configuration
  become_user: "{{ rtd_user }}"
  template: src=../templates/project/{{ item }} dest="{{ rtd_root }}/readthedocs/settings/{{ item }}"
  with_items:
    - managed.py
    - admin.py
  when: app == 1
  tags:
     - deploy

- name: django configuration
  become_user: "{{ rtd_user }}"
  template: src=../templates/project/{{ item }} dest="{{ rtd_italia_root }}/italia_rtd/settings_{{ item }}"
  with_items:
    - redirect.py
  when: app == 1
  tags:
     - deploy

- name: run migrations
  become_user: "{{ rtd_user }}"
  command: "{{ rtd_virtualenv }}/bin/python {{ rtd_root }}/manage.py migrate --settings=readthedocs.settings.managed"
  when: app == 1
  tags:
     - deploy

- name: run collectstatic
  become_user: "{{ rtd_user }}"
  command: "{{ rtd_virtualenv }}/bin/python {{ rtd_root }}/manage.py collectstatic -lc --noinput --settings=readthedocs.settings.managed"
  when: app == 1
  tags:
     - deploy

- name: systemd environment
  template: src=../templates/systemd/{{ item }}  dest="{{ rtd_home}}/{{ item }}" mode=644
  with_items:
    - rtd_environment
  when: app == 1
  tags:
     - configuration
     - deploy

- name: tempfile
  template: src=../templates/systemd/tempfile  dest=/etc/tmpfiles.d/rtd.conf mode=644 force=1
  when: app == 1
  tags:
     - deploy

- name: systemd-tempfile
  command: systemd-tmpfiles --create
  when: app == 1
  tags:
     - configuration
     - deploy

- name: systemd configuration
  template: src=../templates/systemd/{{ item }}  dest=/etc/systemd/system/{{ item }} mode=644 force=1
  with_items:
    - rtd_celery_build.service
    - rtd_celery_docs.service
    - rtd_celery_web.service
    - rtd_gunicorn_admin.service
    - rtd_gunicorn_api.service
    - rtd_gunicorn_redirect.service
    - rtd_gunicorn_web.service
  when: app == 1
  tags:
     - configuration
     - deploy

- name: systemd enable
  systemd: name="{{ item }}" state=restarted enabled=True daemon_reload=yes
  with_items:
    - rtd_celery_build.service
    - rtd_celery_docs.service
    - rtd_celery_web.service
    - rtd_gunicorn_admin.service
    - rtd_gunicorn_api.service
    - rtd_gunicorn_redirect.service
    - rtd_gunicorn_web.service
  when: app == 1
  tags:
     - configuration
     - deploy

- name: nginx configuration
  template: src=../templates/nginx/{{ item }}  dest=/etc/nginx/{{ item  }} force=1
  with_items:
    - nginx.conf
    - conf.d/general-configuration.conf
    - sites-available/readthedocs-cname.conf
    - sites-available/readthedocs-dev.conf
    - sites-available/readthedocs-media.conf
    - sites-available/readthedocs-redirects.conf
    - sites-available/readthedocs-site.conf
    - sites-available/readthedocs-subdomain.conf
  notify: reload nginx
  when: app == 1
  tags:
     - configuration
     - deploy  # this is only temporary

- name: disable default  virtualhost
  file: path=/etc/nginx/sites-enabled/default state=absent
  notify: restart nginx
  when: app == 1
  tags:
     - configuration
     - deploy  # this is only temporary

- name: log dir
  file: path="{{ nginx_logs }}" state=directory owner=www-data group=adm

- name: enable virtualhost
  file: src=/etc/nginx/sites-available/{{ item }} dest=/etc/nginx/sites-enabled/{{ item }} state=link
  with_items:
    - readthedocs-cname.conf
    - readthedocs-dev.conf
    - readthedocs-media.conf
    - readthedocs-redirects.conf
    - readthedocs-site.conf
    - readthedocs-subdomain.conf
  notify: restart nginx
  when: app == 1
  tags:
     - configuration
     - deploy  # this is only temporary

- name: pull docker image ... please wait ... it takes a long time
  command: docker pull "{{ docker_rtd_image }}"
  tags:
     - setup
     - init

